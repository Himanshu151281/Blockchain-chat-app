<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Adam chat</title>
    <!-- <link rel="stylesheet" href="/style.css" /> -->
    <script src="https://cdn.tailwindcss.com?plugins=forms,typography"></script>
    <script
      src="https://unpkg.com/unlazy@0.11.3/dist/unlazy.with-hashing.iife.js"
      defer
      init
    ></script>
  </head>
  <body class="h-dvh bg-purple-100">
    <div class="flex flex-col h-full bg-purple-100">
      <header class="bg-purple-600 shadow-xl text-white p-4">
        <h1 class="text-2xl font-bold">Blockchain Chat App</h1>
      </header>
      <div class="flex-grow p-4 overflow-auto">
        <div class="space-y-4 chats overflow-auto" id="chats"></div>
      </div>
      <div class="p-4 bg-purple-200">
        <form class="flex space-x-2" id="chatForm">
          <input
            type="text"
            placeholder="Type a message..."
            value=""
            name="content"
            class="shadow-lg flex-grow rounded-3xl"
            id="content"
          />
          <button
            type="submit"
            class="shadow-xl bg-purple-600 hover:bg-purple-700 text-white px-4 py-2 rounded-3xl"
          >
            Send
          </button>
        </form>
      </div>
    </div>
    <!-- <script src="/app.js"></script> -->
  </body>
  <script>
    async function fetchChats() {
      try {
        const response = await fetch("/reload");
        const chats = await response.json();
        const chatsDiv = document.getElementById("chats");
        chatsDiv.innerHTML = ""; // Clear the existing content

        for (let key in chats) {
          chats[key].forEach((msg) => {
            const div = document.createElement("div");
            div.className =
              msg.sender === "Adam"
                ? "sender flex justify-end"
                : "receiver flex justify-start";
            div.innerHTML =
              msg.sender === "Adam"
                ? `<div class="max-w-xs px-4 py-2 shadow-lg bg-purple-500 text-white" style="border-radius: 14px 14px 14px 0;"> ${msg.content} </div>`
                : `<div class="max-w-xs px-4 py-2 shadow-sm bg-white text-purple-900" style="border-radius: 14px 14px 0 14px;"> ${msg.content} </div>`;
            chatsDiv.appendChild(div);
          });
        }

        // Scroll to bottom after appending new messages
        scrollToBottom();
      } catch (error) {
        console.error("Error fetching chats:", error);
      }
    }

    function scrollToBottom() {
      const chatsDiv = document.getElementById("chats");
      const lastMessage = chatsDiv.lastElementChild;
      if (lastMessage) {
        lastMessage.scrollIntoView({ behavior: "smooth" });
      }
    }

    document
      .getElementById("chatForm")
      .addEventListener("submit", async function (event) {
        event.preventDefault(); // Prevent the default form submission
        const content = document.getElementById("content").value;

        try {
          const response = await fetch("/adam", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({ content }),
          });

          if (response.ok) {
            document.getElementById("content").value = ""; // Clear the input field
            fetchChats(); // Refresh the chats
          } else {
            console.error("Error sending message:", response.statusText);
          }
        } catch (error) {
          console.error("Error sending message:", error);
        }
      });

    // Fetch chats every 2 seconds
    setInterval(fetchChats, 2000);

    // Initial fetch
    fetchChats();
  </script>
</html>
